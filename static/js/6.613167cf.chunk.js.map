{"version":3,"sources":["utils/bagIdFromAddress.ts","components/dummy/DummyBagItem.tsx","utils/checkSignature.ts","components/ModalDocument.tsx","components/MarketItem.tsx","views/PublicStoreView.tsx"],"names":["bagIdFromAddress","address","split","slice","join","DummyBagItem","id","detail","className","icon","document","size","color","animated","style","width","checkSignature","folder","s","a","DID","getRchainResolver","KeyResolver","getResolver","resolver","did","signature","signatures","kid","base64urlToJSON","protected","resolve","res","doc2","Object","assign","included","fromEntries","entries","filter","key","parseInt","encodePayload","cid","payloadCid","encodeBase64Url","bytes","signer","verifyJWS","publicKey","scheme","console","info","attestSteps","selector","content","publisherSteps","publishSteps","ModalDocument","connect","state","bags","reducer","bagsData","platform","getPlatform","user","dispatch","loadBag","registryUri","bagId","type","payload","reupload","publish","price","fees","props","history","useHistory","priceInput","React","useRef","useState","setPrice","isAttesting","setIsAttesting","isPublishing","setIsPublishing","payees","Map","pdfjs","GlobalWorkerOptions","workerSrc","version","useTour","currentStep","setIsOpen","setCurrentStep","setSteps","useEffect","setTimeout","localStorage","getItem","menuTourStep","current","setFocus","addressFromPurseId","log","areSignaturesValid","Promise","all","keys","reduce","promises","then","values","isSigned","item","lastSignature","undefined","isOpen","onClick","replace","direction","files","map","filename","file","includes","mimeType","mainFile","alt","name","src","data","Fragment","position","ref","class","placeholder","value","onKeyPress","e","onIonChange","inPrice","target","disabled","MarketItem","getPublicKey","purchase","step","sell","identity","isPurchasing","setIsPurchasing","isSelling","setIsSelling","side","create","trash","onlyCompleted","length","completed","awaitsSignature","bag","boxId","checkmarkCircle","purchaseSteps","purchasedSteps","purchased2Steps","PublicStore","connected","getConnected","getBags","getBagsData","documentsCompleted","getDocumentsCompleted","documentsAwaitingSignature","getDocumentsAwaitingSignature","documentsAddressesInOrder","getDocumentsAddressesInOrder","isLoading","searchText","removeItem","setItem","action","Array","x","i","toString"],"mappings":"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","file":"static/js/6.613167cf.chunk.js","sourcesContent":["export const bagIdFromAddress = (address: string) => address.split('/').slice(1).join('')","import React from 'react';\r\nimport {\r\n  IonIcon,\r\n  IonItem,\r\n  IonLabel,\r\n  IonSkeletonText\r\n} from '@ionic/react';\r\n\r\nimport '../BagItem.scoped.css';\r\n\r\nimport { document } from 'ionicons/icons';\r\n\r\ninterface DummyBagItemProps {\r\n  id: string;\r\n}\r\nconst DummyBagItem: React.FC<DummyBagItemProps> = ({ id }) => {\r\n  return (\r\n    <IonItem detail={false}>\r\n      <div className=\"IconContainer\">\r\n        <IonIcon icon={document} size=\"large\" color=\"secondary\" />\r\n      </div>\r\n      <IonLabel className=\"ion-text-wrap\">\r\n        <h4>\r\n          <IonSkeletonText animated style={{ width: '80%' }}></IonSkeletonText>\r\n        </h4>\r\n        <h4>\r\n          <IonSkeletonText animated style={{ width: '60%' }}></IonSkeletonText>\r\n        </h4>\r\n      </IonLabel>\r\n    </IonItem>\r\n  );\r\n};\r\n\r\nexport default DummyBagItem;\r\n","import { Folder } from '../store';\r\n\r\nimport KeyResolver from 'key-did-resolver';\r\nimport { getResolver as getRchainResolver } from \"rchain-did-resolver\";\r\nimport { DID } from 'dids';\r\nimport { base64urlToJSON, encodeBase64Url } from 'dids/lib/utils'\r\nimport { verifyJWS } from 'did-jwt'\r\nimport { encodePayload } from 'dag-jose-utils'\r\n\r\nconst checkSignature = async (folder: Folder, s: string) => {\r\n  const did = new DID({ resolver: { ...await getRchainResolver, ...KeyResolver.getResolver() } })\r\n\r\n    const signature = folder.signatures[s];\r\n    const kid = base64urlToJSON(signature.protected).kid;\r\n\r\n    const res = await did.resolve(kid);\r\n    const doc2 = Object.assign({}, folder);\r\n    const included = Object.fromEntries(Object.entries(doc2.signatures).filter(([key, value]) => parseInt(key) < parseInt(s)));\r\n    doc2.signatures = included;\r\n\r\n    const { cid /*, linkedBlock*/ } = await encodePayload(doc2);\r\n    const payloadCid = encodeBase64Url(cid.bytes)\r\n\r\n    try {\r\n      const signer = verifyJWS( signature.protected + \".\" + payloadCid + \".\" + signature.signature, res.publicKey );\r\n      if (signer.id === kid && doc2.scheme && doc2.scheme[s] === signer.id) {\r\n        console.info(s + \" Signature valid\");\r\n        return true;\r\n      }\r\n    }\r\n    catch(err) {\r\n      console.info(s + \" Signature not valid. \" + err);\r\n      return false;\r\n    }\r\n    return false;\r\n};\r\nexport default checkSignature;","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  IonContent,\r\n  IonLoading,\r\n  IonButtons,\r\n  IonButton,\r\n  //IonProgressBar,\r\n  //IonIcon,\r\n  IonLabel,\r\n  IonItem,\r\n  IonInput,\r\n  IonChip,\r\n  /*\r\n  IonItemSliding,\r\n  IonItemOption,\r\n  IonItemOptions,\r\n  IonIcon,\r\n  IonRange\r\n  */\r\n  //IonCard,\r\n  //IonCardContent,\r\n} from '@ionic/react';\r\n//import { closeCircle, downloadOutline } from 'ionicons/icons';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { useHistory } from 'react-router';\r\nimport { /*Page,*/ pdfjs, /*Document as PdfDocument*/ } from 'react-pdf';\r\n//import { trash, mailUnreadOutline, lockClosedOutline, lockOpenOutline } from 'ionicons/icons';\r\n\r\n//import QRCodeComponent from './QRCodeComponent';\r\nimport checkSignature from '../utils/checkSignature';\r\nimport { State, HistoryState, getPlatform } from '../store';\r\n\r\nimport './ModalDocument.scoped.css';\r\nimport { addressFromPurseId } from 'src/utils/addressFromPurseId';\r\n\r\nimport { useTour } from '@reactour/tour';\r\n\r\n//import { getResolver as getRchainResolver, Resolver } from \"rchain-did-resolver\";\r\n//import * as rchainToolkit from 'rchain-toolkit';\r\n\r\nexport interface KeyPair {\r\n  privateKey: any;\r\n  publicKey: any;\r\n  publicAddress: string;\r\n}\r\n\r\ninterface ModalDocumentProps {\r\n  state: HistoryState;\r\n  registryUri: string;\r\n  bagId: string;\r\n  bags: State['bags'];\r\n  bagsData: State['bagsData'];\r\n  platform: string;\r\n  user: string;\r\n  loadBag: (registryUri: string, bagId: string, state: HistoryState) => void;\r\n  reupload: (resitryUri: string, bagId: string) => void;\r\n  publish: (resitryUri: string, bagId: string, price: number, fees: Array<{\r\n    revAddress: string;\r\n    fraction100: number;\r\n}>) => void;\r\n}\r\n/*\r\ninterface DocumentInfo {\r\n  numPages: number;\r\n}\r\n*/\r\n\r\n\r\nconst attestSteps = [\r\n  { selector: '.SignatureRequiredBtn', content: 'If the photo looks legit you can now attest it and put your signature.' },\r\n]\r\n\r\nconst publisherSteps = [\r\n  { selector: '.attestation-step-file', content: 'Pick a photo you wish to upload. Image data will be stored on-chain in an encrypted form.' },\r\n  //{ selector: '.attestation-step-main-file', content: 'Set your photo as your main file.' },\r\n  { selector: '.attestation-step-name', content: 'Choose a name for your new NFT.' },\r\n  //{ selector: '.attestation-step-select-attestor', content: 'Click here and appoint an attestor.',\r\n    //highlightedSelectors: [\"ionic-selectable-modal.ion-page\"],\r\n    //mutationObservables: [\"ion-modal.show-modal.modal-interactive\"]\r\n  //},\r\n  { selector: '.attestation-step-upload', content: 'Now press upload to begin the attestation process.' },\r\n  { selector: '.attestation-step-set-price', content: \"How much do you think this is worth? Probably not a lot so we're just going to put a small number for you.\" },\r\n]\r\n\r\nconst publishSteps = [\r\n  { selector: '.attestation-step-set-price', content: \"How much do you think this is worth? Probably not a lot so we're just going to put a small number for you.\" },\r\n  { selector: '.attestation-step-set-price', content: \"Come on now...\" },\r\n  { selector: '.attestation-step-do-publish', content: \"Now press it to mint your first NFT. Image data will be stored on-chain unencrypted.\" },\r\n]\r\n\r\n\r\nconst ModalDocumentComponent: React.FC<ModalDocumentProps> = (\r\n  props: ModalDocumentProps\r\n) => {\r\n  \r\n  const history = useHistory();\r\n  const priceInput = React.useRef<HTMLIonInputElement | null>(null);\r\n  //const pdfcontent64 = '';\r\n  //const [page, setPage] = useState<number>();\r\n\r\n  //const [numPages, setNumPages] = useState<number>();\r\n  const [price, setPrice] = useState<number>();\r\n  const [isAttesting, setIsAttesting] = useState<boolean>(false);\r\n  const [isPublishing, setIsPublishing] = useState<boolean>(false);\r\n  /*\r\n  const [recipientInput, setRecipientInput] = useState<string>();\r\n  const [revAddresses, setRevAddresses] = useState<Map<string, string>>(new Map<string, string>([\r\n  ]));\r\n\r\n  const [payees, setPayees] = useState<Map<string, {revAddress: string, fraction100: number}>>(new Map<string, {revAddress: string, fraction100: number}>([\r\n  ]));\r\n\r\n  const [distribution, setDistribution] = useState<number>(25);\r\n  */\r\n  const payees = new Map<string, {revAddress: string, fraction100: number}>([]); //TMP\r\n  /*\r\n  function onDocumentLoadSuccess(docInfo: DocumentInfo) {\r\n    setNumPages(docInfo.numPages);\r\n  }\r\n  */\r\n\r\n  pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version\r\n    }/pdf.worker.js`;\r\n\r\n  const { /* isOpen,*/ currentStep, /* steps,*/ setIsOpen, setCurrentStep, setSteps } = useTour()\r\n  //useEffect(() => {\r\n//\r\n  //}, []);\r\n    /*\r\n  useEffect(() => {\r\n    console.info(\"PRICE UPDATE\");\r\n    if (price && price >= 10200) {\r\n      setCurrentStep(currentStep + 1);\r\n    }\r\n  }, [price])\r\n*/\r\n\r\n  useEffect(() => {\r\n   \r\n    setTimeout(() => {\r\n      if (props.user === \"publisher\") {\r\n        if (localStorage.getItem('tour')) {\r\n          const menuTourStep = parseInt(localStorage.getItem('tour') || '0');\r\n          if (menuTourStep === 0) {\r\n            setTimeout(() => {\r\n              console.info(\"setSteps(publisherSteps);\");\r\n              setIsOpen(false);\r\n              setSteps(publisherSteps);\r\n              setCurrentStep(0);\r\n              setIsOpen(true);\r\n            }, 100);\r\n          }\r\n          if (menuTourStep === 2) {\r\n            setTimeout(() => {\r\n              console.info(\"setSteps(publishSteps);\");\r\n              setIsOpen(false);\r\n              setSteps(publishSteps);\r\n              setCurrentStep(0);\r\n              setIsOpen(true);\r\n              if (priceInput && priceInput.current) {\r\n                console.info(\"SET PRICE\");\r\n                //(priceInput.current as HTMLIonInputElement).value = 20;\r\n                setPrice(20);\r\n                (priceInput.current as HTMLIonInputElement).setFocus();\r\n                setTimeout(() => {\r\n                  setCurrentStep(2);\r\n                  console.info(\"currentStep: \");\r\n                  console.info(currentStep);\r\n                }, 5000);\r\n              }\r\n            }, 100);\r\n          }\r\n          //else {\r\n          //  setIsOpen(false);\r\n          //}\r\n        }\r\n        else {\r\n          setSteps(publisherSteps);\r\n          setIsOpen(true);\r\n          console.info(\"setSteps(publishSteps);\");\r\n        }\r\n      }\r\n      if (props.user === \"attestor\") {\r\n        setSteps(attestSteps);\r\n        setIsOpen(true);\r\n      }\r\n\r\n    }, 100);\r\n    \r\n    setIsOpen(false);\r\n    props.loadBag(props.registryUri, props.bagId, props.state);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  /*\r\n  const renderLoading = () => {\r\n    return <IonProgressBar color=\"secondary\" type=\"indeterminate\" />;\r\n  };\r\n  */\r\n\r\n  \r\n\r\n  const address = addressFromPurseId(props.registryUri, props.bagId);\r\n\r\n  console.log(props.bagsData[address]);\r\n\r\n  const areSignaturesValid = async () => {\r\n    return new Promise<boolean>((resolve => {\r\n      Promise.all<boolean>(\r\n        Object.keys(folder.signatures).reduce((promises: Array<Promise<boolean>>, s) => {\r\n          return [checkSignature(folder, s), ...promises]\r\n        }, [])\r\n      ).then((values) => {\r\n          resolve(values.reduce((isSigned: boolean, item: boolean) => {\r\n            return item !== false && isSigned;\r\n          }, false))\r\n      })\r\n    }));\r\n  }\r\n  /*\r\n  const doDownload = () => {\r\n    if (props.platform === \"web\") {\r\n      var fileUrl = \"data:\" + folder.mimeType + \";base64,\" + folder.data;\r\n\r\n      fetch(fileUrl).then(response => response.blob()).then(blob => {\r\n        const url = window.URL.createObjectURL(blob);\r\n        const link = window.document.createElement(\"a\");\r\n        link.href = url;\r\n        const fileName = folder.name;\r\n        link.setAttribute(\"download\", fileName);\r\n        window.document.body.appendChild(link);\r\n        link.click();\r\n      });\r\n    }\r\n    else {\r\n      //TODO\r\n    }\r\n  };\r\n  */\r\n\r\n  const folder = props.bagsData[address];\r\n  let lastSignature: string | undefined = undefined;\r\n  if (folder && folder.signatures) {\r\n    if (folder.signatures['0']) lastSignature = '0';\r\n    if (folder.signatures['1']) lastSignature = '1';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/*\r\n      <IonHeader>\r\n        <IonToolbar>\r\n          <IonTitle>{props.bagId}</IonTitle>\r\n          <IonButtons slot=\"end\">\r\n            <IonButton\r\n              onClick={() => {\r\n                history.replace('/doc', { direction: 'back' });\r\n              }}\r\n            >\r\n              Close\r\n            </IonButton>\r\n          </IonButtons>\r\n        </IonToolbar>\r\n      </IonHeader>\r\n      */}\r\n    \r\n      <IonContent className=\"modal-document\">\r\n        \r\n        {typeof document === 'undefined' ? (\r\n          <IonLoading isOpen={true} />\r\n        ) : (\r\n          undefined\r\n        )}\r\n        {document === null ? (\r\n          <span className=\"no-document\">No document attached</span>\r\n        ) : (\r\n          /*\r\n          <div className=\"qrCodeContainer\">\r\n            <QRCodeComponent\r\n              url={`did:rchain:${props.registryUri}/${props.bagId}`}\r\n            />\r\n          </div>\r\n          */\r\n          undefined\r\n        )}\r\n        {/* document ? (\r\n          <div className=\"ps5\">\r\n            <div className=\"document\">\r\n              <div className=\"left\">\r\n                {['application/pdf'].includes(\r\n                  folder.mimeType\r\n                ) ? (\r\n                    <div\r\n                      className=\"pdf\"\r\n\r\n                    ><span>PDF</span></div>\r\n                  ) : (\r\n                    <React.Fragment />\r\n                  )}\r\n              </div>\r\n              <div className=\"right\">\r\n                <h5>\r\n                  {props.bagsData[address].name}\r\n                </h5>\r\n                <h5>\r\n                  Date (UTC) {props.bagsData[address].date}\r\n                </h5>\r\n                <h5>\r\n                  {\r\n                    props.bagsData[address].mimeType\r\n                  }\r\n                </h5>\r\n              </div>\r\n            </div>\r\n             */}\r\n\r\n        <IonButtons className=\"ButtonArray\">\r\n          <IonButton\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              history.replace('/doc', { direction: 'back' });\r\n            }}\r\n          >\r\n            Close\r\n          </IonButton>\r\n        </IonButtons>\r\n        <div className=\"FloatingBottomLeft\">\r\n          <div className=\"Files\">\r\n            {Object.keys(folder.files).map(filename => {\r\n              const file = folder.files[filename];\r\n              return (\r\n                <div key={filename}>\r\n                  {['image/png', 'image/jpg', 'image/jpeg'].includes(\r\n                    file.mimeType\r\n                  ) ? (\r\n                    <div\r\n                      className={`ImageFrame ${\r\n                        folder.mainFile === filename ? 'main' : ''\r\n                      }`}\r\n                    >\r\n                      <img\r\n                        className=\"Image\"\r\n                        alt={file.name}\r\n                        src={`data:${file.mimeType};base64, ${file.data}`}\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    <React.Fragment />\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          {Object.keys(folder.signatures).map(s => {\r\n            return (\r\n              <IonChip key={s} className=\"signature-line\">\r\n                {checkSignature(folder, s) ? (\r\n                  <>\r\n                    <span className=\"signature-ok\">✓</span>\r\n                    {`signature n°${s} verified (${folder.signatures[\r\n                      s\r\n                    ].publicKey.slice(0, 12)}…)`}\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <span>✗</span>\r\n                    {`signature n°${s} invalid (${folder.signatures[\r\n                      s\r\n                    ].publicKey.slice(0, 12)}…)`}\r\n                  </>\r\n                )}\r\n              </IonChip>\r\n            );\r\n          })}\r\n          {areSignaturesValid() && props.user === 'publisher' ? (\r\n            <div>\r\n              <IonItem>\r\n                <IonLabel position=\"floating\" color=\"primary\">\r\n                  Enter price\r\n                </IonLabel>\r\n                <IonInput\r\n                  ref={priceInput} \r\n                  class=\"attestation-step-set-price\"\r\n                  color=\"primary\"\r\n                  placeholder=\"enter price(in rev) of nft\"\r\n                  type=\"number\"\r\n                  value={price}\r\n                  onKeyPress={e => {\r\n                    if (e.key === 'Enter' && price && price > 0) {\r\n                      setCurrentStep(currentStep + 1);\r\n                    }\r\n                  }}\r\n                  onIonChange={e => {\r\n                    const inPrice = parseInt((e.target as HTMLInputElement).value);\r\n                      setPrice(inPrice)\r\n                    }\r\n                  }\r\n                />\r\n              </IonItem>\r\n              { /*\r\n              <IonItem>\r\n              <IonInput \r\n                  class=\"attestation-step-set-revaddr\"\r\n                  color=\"primary\"\r\n                  placeholder=\"Add a recipient REV addr\"\r\n                  type=\"text\"\r\n                  value={recipientInput}\r\n                  onIonChange={e => {\r\n                    const inRecipient = (e.target as HTMLInputElement).value;\r\n                      setRecipientInput(inRecipient)\r\n                    }\r\n                  }\r\n                >\r\n                  <IonButton slot=\"end\" onClick={async () => {\r\n                    console.info(\"CLICK\");\r\n                    if (recipientInput) {\r\n                      let revAddr = \"\";\r\n                      console.info(\"recipientInput:\");\r\n                      console.info(recipientInput);\r\n                      \r\n\r\n                      const resolver = new Resolver({\r\n                        ...getRchainResolver()\r\n                      });\r\n                      try {\r\n                        const parsed = await resolver.resolve(\"did:rchain:\"+props.registryUri+\"/\" + recipientInput);\r\n                        \r\n                        const pubKey = parsed.publicKey[0].publicKeyHex;\r\n                        if (pubKey) {\r\n                          revAddr = rchainToolkit.utils.revAddressFromPublicKey(pubKey);\r\n                          console.info(\"REV ADDRESS:\");\r\n                          console.info(revAddr);\r\n                        }\r\n\r\n                      }\r\n                      catch (err) {\r\n                        console.info(\"not a did\");\r\n                      }\r\n                      \r\n                      setRevAddresses(new Map<string, string>([ [recipientInput, revAddr], ...revAddresses]));\r\n                      //setRevDistribution(new Map<string, number>([ [recipientInput, 25], ...revDistribution]));\r\n                      setPayees(new Map<string, {revAddress: string, fraction100: number}>([ [recipientInput, {\"revAddress\": revAddr, \"fraction100\": 100 * 100}], ...payees]));\r\n                      setRecipientInput(\"\");\r\n                    }\r\n                  }}>+</IonButton>\r\n              </IonInput>\r\n              </IonItem>\r\n\r\n              */ }\r\n\r\n              {/*\r\n               [...payees.keys()].map( (val, index) => {\r\n                const revAddress = payees.get(val)?.revAddress as string;\r\n                const fraction = (payees?.get(val)?.fraction100 as number | 0) / 100;\r\n              return (\r\n              <IonItemSliding className=\"container\" key={val}>\r\n                <IonItemOptions side=\"end\">\r\n                  <IonItemOption\r\n                    color=\"danger\"\r\n                    onClick={() => console.log('share clicked')}\r\n                  >\r\n                    <IonIcon icon={trash} size=\"large\" />\r\n                  </IonItemOption>\r\n                </IonItemOptions>\r\n                <IonItem\r\n                  // eslint-disable-next-line no-useless-concat\r\n                  detail={false}\r\n                  button\r\n                >\r\n                  <IonLabel className=\"ion-text-wrap\">\r\n                    {val}\r\n                  </IonLabel>\r\n                  <IonRange pin={true} value={fraction} onIonChange={e => {\r\n                    const newShare = e.detail.value as number * 100\r\n                    const share = new Map<string, {revAddress: string, fraction100: number}>([[val, {\"revAddress\": revAddress, \"fraction100\": newShare}]]);\r\n                    setPayees(new Map<string, {revAddress: string, fraction100: number}>([...payees, ...share]));\r\n\r\n                    console.info(payees);\r\n                  }\r\n                    } />\r\n                  <IonLabel>{fraction}%</IonLabel>\r\n                  <IonButton icon-only color=\"none\" class=\"LockButton\">\r\n                    <IonIcon icon={lockOpenOutline} size=\"small\" color=\"light\"/>\r\n                  </IonButton>\r\n                </IonItem>\r\n              </IonItemSliding>)\r\n              })\r\n              */}\r\n\r\n              <IonButton\r\n                disabled={isPublishing}\r\n                className=\"attestation-step-do-publish SignatureRequiredBtn\"\r\n                size=\"default\"\r\n                onClick={() => {\r\n                  setIsOpen(false);\r\n                  setIsPublishing(true);\r\n                  props.publish(props.registryUri, props.bagId, price || 0, [...payees.values()]);\r\n                }}\r\n              >\r\n                Publish to Marketplace\r\n              </IonButton>\r\n            </div>\r\n          ) : (\r\n            <React.Fragment />\r\n          )}\r\n          {[undefined, '0'].includes(lastSignature) && (\r\n            <IonButton\r\n              disabled={isAttesting}\r\n              className=\"SignatureRequiredBtn\"\r\n              size=\"default\"\r\n              onClick={() => {\r\n                setIsOpen(false);\r\n                setIsAttesting(true);\r\n                props.reupload(props.registryUri, props.bagId);\r\n              }}\r\n            >\r\n              Attest and Sign\r\n            </IonButton>\r\n          )}\r\n        </div>\r\n        </IonContent>\r\n        \r\n    </>\r\n  );\r\n};\r\n\r\nconst ModalDocument = connect(\r\n  (state: HistoryState) => {\r\n    return {\r\n      bags: state.reducer.bags,\r\n      bagsData: state.reducer.bagsData,\r\n      state: state,\r\n      platform: getPlatform(state),\r\n      user: state.reducer.user\r\n    };\r\n  },\r\n  (dispatch: Dispatch) => {\r\n    return {\r\n      loadBag: (registryUri: string, bagId: string, state: HistoryState) => {\r\n        dispatch({\r\n          type: 'LOAD_BAG_DATA',\r\n          payload: {\r\n            registryUri: registryUri,\r\n            bagId: bagId,\r\n            state: state,\r\n          },\r\n        });\r\n      },\r\n      reupload: (registryUri: string, bagId: string) => {\r\n        dispatch({\r\n          type: 'REUPLOAD_BAG_DATA',\r\n          payload: {\r\n            bagId: bagId,\r\n            registryUri: registryUri,\r\n          },\r\n        });\r\n      },\r\n      publish: (registryUri: string, bagId: string, price: number, fees: Array<{\r\n        revAddress: string;\r\n        fraction100: number;\r\n    }>) => {\r\n        dispatch({\r\n          type: 'PUBLISH_BAG_DATA',\r\n          payload: {\r\n            bagId: bagId,\r\n            registryUri: registryUri,\r\n            price: price,\r\n            fees: fees\r\n          },\r\n        });\r\n      },\r\n    };\r\n  }\r\n)(ModalDocumentComponent);\r\n\r\nexport default ModalDocument;","import { connect } from 'react-redux';\r\nimport React, {useState} from 'react';\r\nimport {\r\n  IonIcon,\r\n  IonGrid,\r\n  IonRow,\r\n  //IonItem,\r\n  IonLabel,\r\n  IonItemSliding,\r\n  IonItemOptions,\r\n  IonItemOption,\r\n  IonButton,\r\n  IonCard,\r\n  IonInput,\r\n  /*\r\n  IonPage,\r\n  IonHeader,\r\n  IonCard,\r\n  /*\r\n  IonToolbar,\r\n  IonTitle,\r\n  */\r\n  IonCardTitle,\r\n  IonCardSubtitle,\r\n  //IonCardContent,\r\n  /*\r\n  IonContent,\r\n  */\r\n  IonCardHeader\r\n  \r\n} from '@ionic/react';\r\n//import { Card, Button } from 'react-bootstrap';\r\n\r\n//import { useHistory } from 'react-router';\r\nimport { Dispatch } from 'redux';\r\nimport { Bag, Folder, HistoryState, getPublicKey } from '../store';\r\nimport './MarketItem.scoped.css';\r\nimport { /*document as documentIcon,*/ trash, create, checkmarkCircle } from 'ionicons/icons';\r\nimport { bagIdFromAddress } from '../utils/bagIdFromAddress';\r\nimport { useTour } from '@reactour/tour';\r\n//import { State } from '@ionic-selectable/core/dist/types/stencil-public-runtime';\r\n\r\ninterface MarketItemProps {\r\n  publicKey: string;\r\n  bag: Bag;\r\n  registryUri: string;\r\n  id: string;\r\n  awaitsSignature: boolean;\r\n  completed: boolean;\r\n  onlyCompleted: boolean;\r\n  folder: Folder;\r\n  purchase: (registryUri: string, bagId: string, price: number, step: string) => void;\r\n  sell: (registryUri: string, bagId: string, price: number) => void;\r\n  user: string;\r\n}\r\n\r\nconst MarketItemComponent: React.FC<MarketItemProps> = (\r\n  props: MarketItemProps,\r\n) => {\r\n  const identity = localStorage.getItem('wallet');\r\n  const { /*isOpen,*/ currentStep, /* steps,*/ setIsOpen, setCurrentStep /*, setSteps*/ } = useTour()\r\n  //const history = useHistory();\r\n  const priceInput = React.useRef<HTMLIonInputElement | null>(null);\r\n\r\n  const [isPurchasing, setIsPurchasing] = useState<boolean>(false);\r\n  const [isSelling, setIsSelling] = useState<boolean>(false);\r\n\r\n  const [price, setPrice] = useState<number>();\r\n\r\n  console.log(props.folder);\r\n  return (\r\n    <IonItemSliding className=\"container\" disabled>\r\n      <IonItemOptions side=\"end\">\r\n        <IonItemOption\r\n          color=\"secondary\"\r\n          onClick={() => console.log('favorite clicked')}\r\n        >\r\n          <IonIcon icon={create} size=\"large\" />\r\n        </IonItemOption>\r\n        <IonItemOption\r\n          color=\"danger\"\r\n          onClick={() => console.log('share clicked')}\r\n        >\r\n          <IonIcon icon={trash} size=\"large\" />\r\n        </IonItemOption>\r\n      </IonItemOptions>\r\n      {\r\n        <IonCard class=\"MarketItemCard MarketCard\"\r\n          className={`${\r\n            !props.onlyCompleted &&\r\n            Object.keys(props.folder.signatures).length > 1\r\n              ? 'with-parent'\r\n              : ''\r\n          } ${props.completed ? 'success' : 'secondary'}`}\r\n        >\r\n          <IonCardHeader>\r\n            <IonCardSubtitle>\r\n                <IonLabel className=\"ion-text-wrap\">\r\n                  <h1>{bagIdFromAddress(props.id)}</h1>\r\n                </IonLabel>\r\n            </IonCardSubtitle>\r\n            <IonCardTitle className=\"MarketItemInfo\">\r\n                {!props.awaitsSignature && (\r\n                  <IonGrid>\r\n                    <IonRow>\r\n                      <IonLabel>\r\n                        <h2>Owner: {props.bag.boxId}</h2>\r\n                      </IonLabel>\r\n                    </IonRow>\r\n                    <IonRow>\r\n                    <IonIcon  icon={checkmarkCircle} color=\"success\" />\r\n                    <IonLabel className=\"ion-text-wrap\">\r\n                      <h3>Attested</h3>\r\n                    </IonLabel>\r\n                    </IonRow>\r\n                  </IonGrid>\r\n                )}\r\n            </IonCardTitle>\r\n          </IonCardHeader>\r\n          <div className=\"mainContainer\">\r\n          { /*<div className=\"mainContainer\"> */ }\r\n            <div className=\"IconContainer\">\r\n              {Object.keys(props.folder.files).map(filename => {\r\n                const file = props.folder.files[filename];\r\n                //console.log(file);\r\n                return ['image/png', 'image/jpg', 'image/jpeg'].includes(\r\n                  file.mimeType\r\n                ) ? (\r\n                  <div\r\n                    className={`ImageFrame ${\r\n                      props.folder.mainFile === filename\r\n                        ? 'main'\r\n                        : 'secondary'\r\n                    }`}\r\n                    key={filename}\r\n                  >\r\n                    <img\r\n                      className=\"Image\"\r\n                      alt={file.name}\r\n                        src={`data:${file.mimeType};base64, ${file.data}`}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <React.Fragment />\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"labelContainer\">\r\n              {identity? (\r\n                undefined\r\n              ) : (\r\n                <IonButton\r\n                  disabled={isPurchasing}\r\n                  className=\"PurchaseButton\"\r\n                  onClick={() => {\r\n                    setIsOpen(false);\r\n                    setIsPurchasing(true);\r\n                    props.purchase(\r\n                      props.registryUri,\r\n                      bagIdFromAddress(props.id),\r\n                      props.bag.price || 0,\r\n                      props.user === \"buyer\" ? \"4\" : \"6\"\r\n                    );\r\n                  }}\r\n                >\r\n                  Buy for {(props.bag.price || 0) * (1 / 100000000)} REV\r\n                </IonButton>\r\n              )}\r\n\r\n              {!identity? (\r\n                  undefined\r\n              ) : (\r\n                <div>\r\n                  <IonLabel position=\"floating\" color=\"primary\">\r\n                    Enter price\r\n                  </IonLabel>\r\n                  <IonInput\r\n                    ref={priceInput} \r\n                    \r\n                    color=\"primary\"\r\n                    placeholder=\"enter price(in rev) of nft\"\r\n                    type=\"number\"\r\n                    value={price || 30}\r\n                    onKeyPress={e => {\r\n                      if (e.key === 'Enter' && price && price > 0) {\r\n                        setCurrentStep(currentStep + 1);\r\n                      }\r\n                    }}\r\n                    onIonChange={e => {\r\n                      console.info(parseInt((e.target as HTMLInputElement).value))\r\n                      const inPrice = parseInt((e.target as HTMLInputElement).value);\r\n                        setPrice(inPrice)\r\n                      }\r\n                    }\r\n                  />\r\n                  <IonButton\r\n                  disabled={isSelling}\r\n                  className=\"SellButton\"\r\n                  onClick={() => {\r\n                    setIsSelling(true);\r\n                    setIsOpen(false);\r\n\r\n                    props.sell(\r\n                      props.registryUri,\r\n                      bagIdFromAddress(props.id),\r\n                      price || 3000000000\r\n                    );\r\n                    \r\n                  }}\r\n                >\r\n                  Sell for {(price || 3000000000) * (1 / 100000000)} REV\r\n                </IonButton>\r\n                </div>\r\n              )}\r\n\r\n            </div>\r\n          </div>\r\n          </IonCard>\r\n      }\r\n    </IonItemSliding>\r\n  );\r\n};\r\n\r\nconst MarketItem = connect(\r\n  (state: HistoryState) => {\r\n    return {\r\n      //bags: state.reducer.bags,\r\n      //bagsData: state.reducer.bagsData,\r\n      //state: state,\r\n      user: state.reducer.user,\r\n      publicKey: getPublicKey(state) as string,\r\n    };\r\n  },\r\n  (dispatch: Dispatch) => {\r\n    return {\r\n      purchase: (registryUri: string, bagId: string, price: number, step: string) => {\r\n        dispatch({\r\n          type: 'PURCHASE_BAG',\r\n          payload: {\r\n            bagId: bagId,\r\n            registryUri: registryUri,\r\n            price: price,\r\n            step: step,\r\n          },\r\n        });\r\n      },\r\n\r\n      sell: (registryUri: string, bagId: string, price: number) => {\r\n        dispatch({\r\n          type: 'SELL_BAG',\r\n          payload: {\r\n            bagId: bagId,\r\n            registryUri: registryUri,\r\n            price: price\r\n          },\r\n        });\r\n      },\r\n    };\r\n  }\r\n)(MarketItemComponent);\r\n\r\nexport default MarketItem;\r\n","import { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport {\r\n  IonContent,\r\n  //IonProgressBar,\r\n  IonFab,\r\n  IonFabButton,\r\n  IonIcon,\r\n} from '@ionic/react';\r\nimport { qrCode } from 'ionicons/icons';\r\n\r\nimport {\r\n  getBags,\r\n  getBagsData,\r\n  getConnected,\r\n  getDocumentsAddressesInOrder,\r\n  getDocumentsAwaitingSignature,\r\n  getDocumentsCompleted,\r\n  State,\r\n  HistoryState,\r\n} from '../store';\r\nimport MarketItem from '../components/MarketItem';\r\nimport DummyBagItem from '../components/dummy/DummyBagItem';\r\nimport ModalDocument from '../components/ModalDocument';\r\n\r\nimport { parse } from 'did-resolver';\r\nimport './PublicStore.scoped.css';\r\nimport { useTour } from '@reactour/tour';\r\n\r\ninterface PublicDocumentView {\r\n  connected: string;\r\n  registryUri: string;\r\n  action: 'show' | 'list';\r\n  bagId?: string;\r\n  isLoading: boolean;\r\n  bags: State['bags'];\r\n  bagsData: State['bagsData'];\r\n  documentsAwaitingSignature: State['bagsData'];\r\n  documentsAddressesInOrder: string[];\r\n  documentsCompleted: State['bagsData'];\r\n  searchText: string;\r\n  platform: string;\r\n  user: string;\r\n}\r\n\r\nconst purchaseSteps = [\r\n  { selector: '.MarketCard', content: 'The NFT is now for sale.' },\r\n  { selector: '.PurchaseButton', content: 'Press the \"Buy\" button to purchase this NFT.' },\r\n]\r\n\r\nconst purchasedSteps = [\r\n  { selector: '.MarketCard', content: 'Congratulations! You now own this NFT!' },\r\n  { selector: '.SellButton', content: 'You can put this item back to the store and resell it for a higher price.' },\r\n]\r\n\r\nconst purchased2Steps = [\r\n  { selector: '.MarketCard', content: 'Congratulations! You now own this NFT! This concludes our demo.' },\r\n]\r\n\r\nconst PublicStoreComponent: React.FC<PublicDocumentView> = props => {\r\n  const identity = localStorage.getItem('wallet');\r\n  const history = useHistory();\r\n\r\n  const { /* isOpen, currentStep, steps,*/ setIsOpen, setCurrentStep, setSteps } = useTour()\r\n  useEffect(() => {\r\n    if (props.user === \"buyer\") {\r\n      if (localStorage.getItem('tour')) {\r\n        const menuTourStep = parseInt(localStorage.getItem('tour') || '0');\r\n        if (menuTourStep < 4) {\r\n          setSteps(purchaseSteps);\r\n        }\r\n        else {\r\n          setSteps(purchasedSteps);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (props.user === \"buyer2\") {\r\n      if (localStorage.getItem('tour')) {\r\n        const menuTourStep = parseInt(localStorage.getItem('tour') || '0');\r\n        if (menuTourStep < 6) {\r\n          setSteps(purchaseSteps);\r\n        }\r\n        else {\r\n          setSteps(purchased2Steps);\r\n          localStorage.removeItem('demo');\r\n          localStorage.setItem('tour', '0');\r\n        }\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      setIsOpen(false);\r\n      setCurrentStep(0);\r\n      setIsOpen(true);\r\n      setTimeout(() => {\r\n        setCurrentStep(1);\r\n      }, 6000)\r\n    }, 100)\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const scanQRCode = () => {\r\n    (window as any).cordova.plugins.barcodeScanner.scan(\r\n      (result: any) => {\r\n        try {\r\n          const parsedDid = parse(result.text);\r\n          const method = parsedDid.method;\r\n\r\n          if (method === 'rchain') {\r\n            let link = '/doc/show/' + parsedDid.id;\r\n            if (parsedDid.path) {\r\n              link = link + parsedDid.path;\r\n            }\r\n            history.push(link);\r\n          }\r\n        } catch (err) {\r\n          console.info('not a DID. ' + err);\r\n\r\n          const url = new URL(result.text);\r\n          //TODO: check if link is also a valid hosted web app\r\n          history.push(url.pathname + url.search);\r\n        }\r\n      },\r\n      (err: string) => {\r\n        console.error(err);\r\n      },\r\n      {\r\n        showTorchButton: true,\r\n        prompt: 'Scan document URL',\r\n        formats: 'QR_CODE',\r\n        resultDisplayDuration: 0,\r\n      }\r\n    );\r\n  };\r\n\r\n  if (props.action === 'show') {\r\n    return (\r\n      <IonContent>\r\n        <ModalDocument\r\n          registryUri={props.registryUri as string}\r\n          bagId={props.bagId as string}\r\n        />\r\n      </IonContent>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"public-store\">\r\n      {identity ? (\r\n        <div className=\"title\">\r\n          <h2>My NFTs</h2>\r\n        </div>\r\n      ) : (\r\n        <div className=\"title\">\r\n          <h2>NFT Marketplace</h2>\r\n        </div>\r\n      )}\r\n      <IonContent className=\"container\">\r\n        {props.platform !== 'web' && false ? (\r\n          <IonFab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\r\n            <IonFabButton color=\"tertiary\" onClick={scanQRCode}>\r\n              <IonIcon icon={qrCode} />\r\n            </IonFabButton>\r\n          </IonFab>\r\n        ) : (\r\n          undefined\r\n        )}\r\n        {/*\r\n        props.isLoading && props.action === \"list\"\r\n        ? renderLoading()\r\n        : undefined\r\n        */}\r\n        {props.action === 'list' ? (\r\n          <>\r\n            {!props.isLoading\r\n              ? props.documentsAddressesInOrder.map(address => {\r\n                return (\r\n                    <div className=\"container\">\r\n                    <MarketItem\r\n                      key={address}\r\n                      registryUri={props.registryUri}\r\n                      id={address}\r\n                      bag={props.bags[address]}\r\n                      folder={props.bagsData[address]}\r\n                      onlyCompleted={false}\r\n                      awaitsSignature={\r\n                        !!props.documentsAwaitingSignature[address]\r\n                      }\r\n                      completed={!!props.documentsCompleted[address]}\r\n                    />\r\n                    </div>\r\n                  );\r\n                })\r\n              : [...Array(10)].map((x, i) => (\r\n                  <DummyBagItem key={i} id={i.toString()} />\r\n                ))}\r\n          </>\r\n        ) : (\r\n          undefined\r\n        )}\r\n      </IonContent>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PublicStore = connect(\r\n  (state: HistoryState) => {\r\n    return {\r\n      connected: getConnected(state),\r\n      bags: getBags(state),\r\n      bagsData: getBagsData(state),\r\n      documentsCompleted: getDocumentsCompleted(state),\r\n      documentsAwaitingSignature: getDocumentsAwaitingSignature(state),\r\n      documentsAddressesInOrder: getDocumentsAddressesInOrder(state),\r\n      isLoading: state.reducer.isLoading,\r\n      searchText: state.reducer.searchText,\r\n      platform: state.reducer.platform,\r\n      user: state.reducer.user,\r\n    };\r\n  },\r\n  (dispatch: Dispatch) => {\r\n    return {};\r\n  }\r\n)(PublicStoreComponent);\r\n\r\nexport default PublicStore;\r\n"],"sourceRoot":""}