new basket,
  returnCh,
  entryCh,
  lookup(`rho:registry:lookup`),
  stdout(`rho:io:stdout`)
in {

  lookup!(`rho:id:REGISTRY_URI`, *entryCh) |

  for(entry <- entryCh) {
    entry!(
      {
        "type": "SEND_TOKENS",
        // signature of the payload + bag nonce in it, with the private key of the bag owner (generateSignatureForNonce.js)
        "signature": "SIGNATURE",
        "payload": {
          // new nonce, must be different and random (generateNonce.js)
          "bagNonce": "BAG_NONCE",
          // new nonce for the new bag
          "bagNonce2": "BAG_NONCE_2",
          // bag ID to send tokens from (ex: "0")
          "bagId": "BAG_ID",
          // new bag ID (index, home, contact, document etc.)
          "newBagId": "NEW_BAG_ID",
          // quantity of tokens to send
          "quantity": QUANTITY,
          // publicKey this send those tokens to (can be the same just split a bag)
          "publicKey": "PUBLIC_KEY",
          // data (optional) to be attached to the new bag (in bagsData)
          "data": BAG_DATA
        }
      },
      *returnCh
    )
  } |

  for (resp <- returnCh) {
    match *resp {
      true => {
        basket!({ "status": "completed" }) |
        stdout!("completed, tokens send")
      }
      _ => {
        basket!({ "status": "failed", "message": *resp }) |
        stdout!(("failed", *resp))
      }
    }
  }
}
