new basket,
  entryCh,
  returnCh,
  lookup(`rho:registry:lookup`),
  stdout(`rho:io:stdout`)
in {

  lookup!(`rho:id:REGISTRY_URI`, *entryCh) |

  for(entry <- entryCh) {
    entry!(
      {
        "type": "UPDATE_TOKEN_DATA",
        // signature of the payload + contract nonce in it, with the private key of the owner (generateSignatureForNonce.js)
        "signature": "SIGNATURE",
        "payload": {
          // new nonce, must be different and random (generateNonce.js)
          "newNonce": "NEW_NONCE",
          // token ID you want to attach data to
          "n": TOKEN_ID,
          // data is used only if new token ("n" : Nil)
          "data": DATA
        }
      },
      *returnCh
    )
  } |

  for (resp <- returnCh) {
    match *resp {
      true => {
        basket!({ "status": "completed" }) |
        stdout!("completed, data updated")
      }
      _ => {
        basket!({ "status": "failed", "message": *resp }) |
        stdout!(("failed", *resp))
      }
    }
  }
}
